"""
This module defines the command-line interface for the `webster` package.
"""

import os
from os import sep
from threading import Thread

from urllib.parse import urlparse
import click

from webster import __version__
from webster.console import cmsg
from webster.tools import run_api


@click.group()
@click.version_option(__version__)
def main() -> None:
    """
    Entry point for the Webster command-line interface.
    """
    pass


@main.command()
@click.argument("url")
@click.option(
    "--depth",
    "-d",
    default=3,
    help="The maximum depth to scrape. Defaults to 3.",
)
@click.option(
    "--output",
    "-o",
    default=".",
    help="The directory to save the scraped files to. Defaults to './.webster/scrape'.",
)
def scrape(url: str, depth: int, output: str) -> None:
    """
    Scrape a website and save the HTML files locally. Depth is the maximum number of link-outs to follow from the URL.
    """

    from webster.scrape import Scraper

    scraper = Scraper(url=url, output_path=output)

    cmsg("accent", msg=f"Scraping '{url}'...")
    scraper.scrape_links(depth=depth)

    cmsg("success", msg="Scraped successfully! Saving sitemap...")
    scraper.save_sitemap()

    cmsg("success", msg="[u]DONE![/u]")


@main.command()
@click.option(
    "--chunk-size",
    "-cs",
    default=1000,
    help="The size of each chunk. Defaults to 1000.",
)
@click.option(
    "--chunk-overlap",
    "-co",
    default=200,
    help="The character overlap between chunks. Defaults to 200.",
)
@click.option(
    "--webster-dir",
    "-w",
    default=f".{sep}.webster{sep}scrape",
    help="The location of the '.webster' folder generated by 'webster scrape'. Defaults to './.webster'.",
)
def embed(
    chunk_size: int,
    chunk_overlap: int,
    webster_dir: os.PathLike = os.path.join(".", ".webster"),
) -> None:
    """
    Embed the scraped HTML files using the OpenAI Text Embedding API.
    """

    from webster.embed import Embedder

    api_thread()

    cmsg("accent", msg="Embedding HTML files to vector DB...")
    embedder = Embedder(
        webster_path=webster_dir, chunk_size=chunk_size, chunk_overlap=chunk_overlap
    )
    embedder.embed()
    cmsg("success", msg="[u]DONE![/u]")


@main.command()
@click.option(
    "--webster-dir",
    "-w",
    default=f".{sep}.webster",
    help="The location of the '.webster' folder generated by 'webster scrape' and used by 'webster embed'. Defaults to './.webster'.",
)
@click.argument("query")
def ask(webster_dir: os.PathLike, query: str) -> None:
    """
    Ask a question to Webster.
    """

    api_thread()

    from webster.chat import WebsterChat

    client = WebsterChat(webster_path=webster_dir)
    cmsg("accent", msg="Asking Webster...")
    client.ask({"question": query})
    cmsg("success", msg="\n[u]DONE![/u]")


def api_thread() -> None:
    """
    Entry point for the Webster command-line interface.
    """

    thread = Thread(target=run_api, daemon=True)
    thread.start()


if __name__ == "__main__":
    main()
