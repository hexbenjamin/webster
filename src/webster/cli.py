"""
This module defines the command-line interface for the Webster package.
"""

import os
from os import sep
from threading import Thread

from urllib.parse import urlparse
import click

from webster import __version__
from webster.console import CPRINT

from webster.api import run_api
from webster.embed import Embedder
from webster.scrape import scrape_links, save_sitemap


@click.group()
@click.version_option(__version__)
def main() -> None:
    """
    Entry point for the Webster command-line interface.
    """
    pass


@main.command()
@click.argument("url")
@click.option(
    "--depth",
    "-d",
    default=3,
    help="The maximum depth to scrape. Defaults to 3.",
)
@click.option(
    "--output",
    "-o",
    default=f".{sep}.webster{sep}scrape",
    help="The directory to save the scraped files to. Defaults to './.webster/scrape'.",
)
def scrape(url: str, depth: int, output: str) -> None:
    """
    Scrape a website and save the HTML files locally. Depth is the maximum number of link-outs to follow from the URL.
    """
    url_parts = urlparse(url)
    scheme, origin, path = (
        url_parts.scheme,
        url_parts.netloc,
        url_parts.path,
    )
    sitemap = scrape_links(scheme, origin, path, depth=depth, output_path=output)
    save_sitemap(sitemap, os.path.join(output, ".webster", "scrape"))


@main.command()
@click.option(
    "--chunk-size",
    "-cs",
    default=1000,
    help="The size of each chunk. Defaults to 1000.",
)
@click.option(
    "--chunk-overlap",
    "-co",
    default=200,
    help="The character overlap between chunks. Defaults to 200.",
)
@click.option(
    "--webster-dir",
    "-w",
    default=f".{sep}.webster{sep}scrape",
    help="The location of the '.webster' folder generated by 'webster scrape'. Defaults to './.webster'.",
)
def embed(
    chunk_size: int,
    chunk_overlap: int,
    webster_dir: os.PathLike = os.path.join(".", ".webster"),
) -> None:
    """
    Embed the scraped HTML files using the OpenAI Text Embedding API.
    """
    CPRINT("Embedding HTML files...")

    embedder = Embedder(
        webster_path=webster_dir, chunk_size=chunk_size, chunk_overlap=chunk_overlap
    )
    embedder.embed()
    CPRINT("Done!", style="bold green")


def start() -> None:
    """
    Entry point for the Webster command-line interface.
    """

    thread = Thread(target=run_api)
    thread.daemon = True

    thread.start()
    main()


if __name__ == "__main__":
    start()
